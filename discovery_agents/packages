#!/bin/sh
# vim: smartindent tabstop=4 shiftwidth=4 number expandtab colorcolumn=100
#
# This file is part of the Assimilation Project.
#
# Author: Alan Robertson <alanr@unix.sh>
# Copyright (C) 2013,2014 - Assimilation Systems Limited
#
# Free support is available from the Assimilation Project community - http://assimproj.org
# Paid support is available from Assimilation Systems Limited - http://assimilationsystems.com
#
# The Assimilation software is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Assimilation software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Assimilation Project software.  If not, see http://www.gnu.org/licenses/
#
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
cmdexists() {
  for dir in $(echo $PATH | tr ':' ' ')
  do
    if
      [ -f "$dir/$1" -a -x "$dir/$1" ]
    then
      echo "$dir/$1"
      return 0
    fi
  done
  return 1
}


# Debian Packages
dpkg_pkgs() {
  DPKG=$(cmdexists dpkg-query) || return 1
  printf '%s"deb":{' "$ourcomma"
  comma='
'
  "${DPKG}" --show --showformat='"${package;0}::${architecture;0}":"${version;0}"\n' 2>/dev/null |
  sort -u |
  while
    read line
  do
    printf '%s' "${comma}${line}"
    comma=',
'
  done
  printf '}'
  return 0
}

# RPM Packages
rpm_pkgs() {
  RPM=$(cmdexists rpm) || return 1
  printf '%s"rpm":{' "$ourcomma"
  comma='
'
  "${RPM}" -qa --queryformat='"%{NAME}::%{ARCH}":"%{VERSION}-%{RELEASE}"\n' 2>/dev/null | sort -u |
  while
    read line
  do
    printf '%s' "${comma}${line}"
    comma=',
'
  done
  printf '}'
  return 0
}

# Python (pip) Packages
pip_pkgs() {
  PIP=$(cmdexists pip) || return 1
  printf '%s"pip":{' "$ourcomma"
  comma='
'
  "${PIP}" list 2>/dev/null | sed -e 's%  *%%' -e 's%^%"%' -e 's%(%": "%' -e 's%)%"%' | sort -u |
  while
    read line
  do
    printf '%s%s' "${comma}" "${line}"

    comma=',
'
  done
  printf '\n}'
  return 0
}

# Ruby GEMs
gem_pkgs() {
  GEM=$(cmdexists gem) || return 1
  printf '%s"gem":{' "$ourcomma"
  comma='
'
  "${GEM}" list -q 2>/dev/null | sed -e 's%  *%%' -e 's%^%"%' -e 's%(%": "%' -e 's%)%"%' | sort -u |
  while
    read line
  do
    printf '%s%s' "${comma}" "${line}"

    comma=',
'
  done
  printf '\n}'
  return 0
}

#
#   Node.js commonly has several versions of a given package loaded...
#   so we add a suffix onto the later versions...
#
npm_pkgs(){
  NPM=$(cmdexists npm) || return 1
  printf '%s"npm":{' "$ourcomma"
  comma='
'
  "${NPM}" -g ls 2>/dev/null | sed -e 's%[^A-Za-z_]* %%' -e 's%@%	%' | sort -u | (
  seq=1
  prevpkg=NOSUCHPACKAGE
  while
    read package version
  do
    test -z "$version"  && continue
    if
        [ "X$package" != "X$prevpkg" ]
    then
        seq=1
        printf '%s"%s": "%s"' "${comma}" "${package}" "$version"
    else
        seq=$(expr $seq + 1)
        printf '%s"%s#%d": "%s"' "${comma}" "${package}" "$seq" "$version"
    fi
    prevpkg=$package
    comma=',
'
  done)
  printf '\n}'
  return 0
}

# PHP packages
php_pkgs() {
  PHP=$(cmdexists php) || return 1
  printf '%s"php":{' "$ourcomma"
  comma='
'
  "${PHP}"  -r 'foreach (get_loaded_extensions() as $extension) echo "\"$extension\": " . "\"" . phpversion($extension) . "\"\n";' |
  sort -u |
  while
    read line
  do
    case $line in
        *'""'*)     continue;;
        *)          : OK ;;
    esac
    printf '%s%s' "${comma}" "${line}"
    comma=',
'
  done
  printf '\n}'
  return 0
}

discover() {
    cat <<-!
	{
	  "discovertype": "packages",
	  "description": "Package information",
	  "host": "$(uname -n)",
	  "source": "$0",
	  "data": {
	!
  ourcomma=""
  # Maybe one day I'll look at Perl - the complete answer is quite slow, and requires installing
  # a package not otherwise required.
  # For Java it would probably have to be a separate package since there is no central
  # repository for JARs like other languages have.
  # For that case, we could trigger discovery based on Java programs talking on the network
  # like we do for collecting checksums.
  for pkgtype in dpkg_pkgs gem_pkgs npm_pkgs php_pkgs pip_pkgs rpm_pkgs
  do
    if 
      $pkgtype "$ourcomma"
    then
      ourcomma=",
"
    fi
  done
  echo "}}"
}
discover
